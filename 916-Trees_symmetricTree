Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).

link : https://leetcode.com/problems/symmetric-tree/

Code : 

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isSymmetric(TreeNode* root) {
        
        if(root==NULL || (root->left == NULL && root->right == NULL))
            return true;
    
        
        queue<TreeNode * >q;
        
        q.push(root);
        
        while(!q.empty()){
            int n = q.size();
            vector<TreeNode *>v = {};
            
            
            while(n--)
            {
                TreeNode * curr = q.front();
                q.pop();
                
                if(curr == NULL)
                    continue;
                
                if(curr->left != NULL)
                    q.push(curr->left) ,v.push_back(curr->left);
                else
                    q.push(NULL) , v.push_back(NULL);
                
                if(curr->right)
                    q.push(curr->right) , v.push_back(curr->right);
                
                else
                    q.push(NULL) , v.push_back(NULL);
                
                
            }
            
            for(TreeNode * i : v)
            {
                if(i==NULL)
                    cout << "null" << " ";
                else
                    cout << i->val << " ";
            }
            cout << endl;
            int k = v.size();
            
            int i = 0 , j = k-1;
            
            while(i<j)
            {
                if(v[i]==NULL && v[j] == NULL)
                {
                    i++ , j--;
                    continue;
                }
                
                if(v[i] == NULL && v[j] != NULL)
                    return false;
                
                if(v[j] == NULL && v[i] != NULL)
                    return false;
                    
                if(v[i]->val != v[j]->val )
                    return false;
                
                i++,j--;
            }
            
        
        }
        return true;
    }
};
