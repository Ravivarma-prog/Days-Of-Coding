The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.

Given an integer n, return the number of distinct solutions to the n-queens puzzle.

 link : https://leetcode.com/problems/n-queens-ii/
 
 Code:
 
 class Solution {
public:
    
    bool isValid(int n , int r ,int c , vector<vector<int>> &b)
    {
        for(int i = 0 ; i < n ; i++)
        {
            if(b[r][i] == 1)
                return false;
        }
        
        for(int i = 0 ; i < n ; i++)
        {
            if(b[i][c] == 1)
                return false;
        }
        
        int i,j;
        
        i=r,j=c;
        
        while(i-1 >= 0 && j-1 >= 0)
        {
            if(b[i-1][j-1]==1)
                return false;
            i--,j--;
        }
        
        
        i=r,j=c;
        
        while(i-1 >= 0 && j+1 < n)
        {
            if(b[i-1][j+1]==1)
                return false;
            i--,j++;
        }
        
        
        i=r,j=c;
        
        while(i+1 < n && j-1 >= 0)
        {
            if(b[i+1][j-1]==1)
                return false;
            i++,j--;
        }
        
        
        i=r,j=c;
        
        while(i+1 < n && j+1 < n)
        {
            if(b[i+1][j+1]==1)
                return false;
            i++,j++;
        }
        return true;
    }
    
    
    int Nqueens(int n , int r , vector<vector<int>> & b)
    {
        if(r == n)
            return 1;
        
        int ans = 0;
        for(int j = 0 ; j < n ; j++)
        {
            if(isValid(n , r , j , b))
            {
                b[r][j] = 1;
                ans+=Nqueens(n , r+1 , b);
            }
            
            b[r][j] = 0;
        }
        
        return ans;
    }
    
    
    int totalNQueens(int n) {
        vector<vector<int>> board(n,vector<int>(n,0));
        int ans = Nqueens(n , 0 , board);
        return ans;
    }
};
