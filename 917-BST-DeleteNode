Given a root node reference of a BST and a key, delete the node with the given key in the BST.
Return the root node reference (possibly updated) of the BST.

link : https://leetcode.com/problems/delete-node-in-a-bst/

Code :
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    
    TreeNode * findMin(TreeNode * root)
    {
        if(root == NULL)
            return NULL;
        
        if(root->left == NULL)
            return root;
        
        return findMin(root->left);
    }
    
   
    
public:
    TreeNode* deleteNode(TreeNode* root, int key) {
    
        if(root == NULL)
            return NULL;
        
        if(key < root->val)
            root->left = deleteNode(root->left , key);
        
        else if(key > root->val)
            root->right = deleteNode(root->right , key);
        
        else if(root->left!=NULL && root->right!=NULL)
        {
            TreeNode * t = findMin(root->right);
            root->val = t->val;
            root->right = deleteNode(root->right , t->val);
        }
        
        else
        {
            TreeNode * t = root;
            root = root->left ? root->left : root->right;
            delete(t);
        }
    
        return root;
    }
};
