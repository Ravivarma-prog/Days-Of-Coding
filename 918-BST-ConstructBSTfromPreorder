Given an array of integers preorder, which represents the preorder traversal of a BST (i.e., binary search tree), construct the tree and return its root.

link : https://leetcode.com/problems/construct-binary-search-tree-from-preorder-traversal/

Code :

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    
    TreeNode * insertNode(TreeNode * root , int x)
    {
        TreeNode * temp = new TreeNode(x);
        
        if(root == NULL)
            return temp;
        
        if(x < root->val)
            root->left = insertNode(root->left , x);
        
        if(x > root->val)
            root->right = insertNode(root->right , x);
        
        return root;
    }
    
public:
    TreeNode* bstFromPreorder(vector<int>& preorder) {
        int n = preorder.size();
        
        TreeNode * root = NULL;
        
        for(int i = 0 ; i < n  ;i++)
        {
            root = insertNode(root , preorder[i]);
        }
        
        return root;
    }
};
