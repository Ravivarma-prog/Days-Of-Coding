Given the root of a binary tree, return the sum of all left leaves.

Approach : If we have a left node and if it is a leaf node then add it and recurse through the right subtree
           else recurse through both left and right subtree
         
Time Complexity :  O(N) where N is the number of nodes in the binary tree
Space Complexity : O(1)

link : https://leetcode.com/problems/sum-of-left-leaves/

Code :

class Solution {
public:
    int sumOfLeftLeaves(TreeNode* root) {
        if(!root)
            return 0;
        
        if(root->left && root->left->left == NULL && root->left->right == NULL)
            return root->left->val + sumOfLeftLeaves(root->right);
    
        return sumOfLeftLeaves(root->left)+sumOfLeftLeaves(root->right);
        
        
    }
};
