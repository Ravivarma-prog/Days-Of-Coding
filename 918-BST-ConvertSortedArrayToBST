Given an integer array nums where the elements are sorted in ascending order, convert it to a height-balanced binary search tree.

A height-balanced binary tree is a binary tree in which the depth of the two subtrees of every node never differs by more than one.

link : https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/

Code : 

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    
    TreeNode * build(vector<int> a , int start , int end)
    {
        if(start > end)
            return NULL;
        
        if(start == end)
            return new TreeNode(a[start]);
        
        int mid = (start+end)/2;
        
        TreeNode * t = new TreeNode(a[mid]);
        
        t->left = build(a , start , mid-1);
        t->right = build(a , mid+1 , end);
        
        return t;
        
    }
    
public:
    TreeNode* sortedArrayToBST(vector<int>& nums) {
        int n = nums.size();
        TreeNode * root = build(nums , 0 , n-1);
        return root;
    }
};
