Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.

link : https://leetcode.com/problems/reverse-nodes-in-k-group/

Code :

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseKGroup(ListNode* head, int k) {
        if(head == NULL || head->next == NULL)
            return head;
        
        ListNode * curr = head , * prev = NULL ,  * start = head , * end = head , * nextNode = head , *temp = head;
        
        int i;
        
        for(i = 1 ; i < k ; i++)
        {
            end = end->next;
        }
      
        
        end = end->next;
        prev = end;
        while(curr != end)
        {
            nextNode = curr->next;
            curr->next = prev;
            prev = curr;
            curr = nextNode;
        }
        
        head = prev;
        
        
        while(curr!=NULL){
            curr = end;
            temp = end;
            i = k;
            
            while(end)
            {
                i--;
                if(i==0 || end == NULL)
                    break;
                end = end->next;
            }
            
            if(i!=0)
                break;
            
            end = end->next;
            prev = end;
            
            while(curr != end)
            {
                nextNode = curr->next;
                curr->next = prev;
                prev = curr;
                curr = nextNode;
            }
            
            start->next = prev;
            start = temp;
        }
        
        return head;
    }
};
