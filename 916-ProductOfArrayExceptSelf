Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].
The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.
You must write an algorithm that runs in O(n) time and without using the division operation.

link : https://leetcode.com/problems/balanced-binary-tree/submissions/

Code:

class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        int n = nums.size();
        
        int leftProduct[n];
        int rightProduct[n];
        
        leftProduct[0] = 1;
        
        for(int i = 1; i < n ; i++)
        {
            leftProduct[i] = leftProduct[i-1]*nums[i-1];
        }
        
        rightProduct[n-1] = 1;
        
        for(int i = n-2 ; i >= 0 ; i--)
        {
            rightProduct[i] = rightProduct[i+1]*nums[i+1];
        }
        
        vector<int> ans = {};
        
        for(int i = 0 ; i < n ; i++)
        {
            ans.push_back(leftProduct[i]*rightProduct[i]);
        }
        
        return ans;
        
    }
};
