Given the head of a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.

You should preserve the original relative order of the nodes in each of the two partitions.

Approach : 2 pointer for lesser numbers and greater numbers

link : https://leetcode.com/problems/partition-list/

Code : 

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* partition(ListNode* head, int x) {
        
        if(head == NULL || head->next == NULL)
            return head;
        
        ListNode * lh , *lt , *gh , * gt;
        
        lh = lt = gh = gt = NULL;
        
        while(head)
        {
            if(head->val < x)
            {
                ListNode * temp = new ListNode(head->val);
                
                if(lh == NULL)
                    lh = lt = temp;
                else
                    lt->next = temp , lt = temp;
            }
            
            else
            {
                
                ListNode * temp = new ListNode(head->val);
                    
                if(gh == NULL)
                    gh = gt = temp;
                else
                    gt->next = temp , gt =temp;              
                
            }
            
            head = head->next;
        }
        
        if(lh)
            lt->next = gh;
        
        else
            lh = gh;
        
        return lh;
    }
};

/*

lh , lt ,gh, gt

lh   lt

1->2->2

gh   gt 
4->3->5

lt->next = gh;

retunr lh

*/
