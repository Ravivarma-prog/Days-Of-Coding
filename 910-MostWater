Given n non-negative integers a1, a2, ..., an , where each represents a point at coordinate (i, ai). 
n vertical lines are drawn such that the two endpoints of the line i is at (i, ai) and (i, 0). 
Find two lines, which, together with the x-axis forms a container, such that the container contains the most water.
Notice that you may not slant the container.

link : https://leetcode.com/problems/container-with-most-water/

Code : 

Approach 1 :

class Solution {
public:
    int maxArea(vector<int>& height) {
        int mxWater = 0;
        int n = height.size();
        int i = 0 , j = n-1;
        
        while(i < j)
        {
            
            mxWater = max(mxWater , (j-i)*min(height[i],height[j]));
            
            if(height[i] == height[j])
            {
                
                i++;
                j--;
            }
            
            else
            {
                if(height[i] < height[j])
                    i++;
                else
                    j--;
            }
        }
        
        return mxWater;
        
    }
};

Approach 2 : DP Approach 

class Solution {
public:
    int maxArea(vector<int>& height) {
        int n = height.size();
        vector<int> water(n , 0);
        
        for(int i = 1 ; i < n ; i++)
        {
            for(int j = 0; j < i ; j++)
            {
                water[i] = max(water[i] , (i-j)*min(height[i],height[j]));
            }
        }
        int mxWater = 0;
        
        for(int i =0 ; i<n;i++){
            mxWater = max(mxWater , water[i]);
        }
        
        return mxWater;
        
    }
};
