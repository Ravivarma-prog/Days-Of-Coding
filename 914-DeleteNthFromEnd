Given the head of a linked list, remove the nth node from the end of the list and return its head.

Approach : We should do it in one pass. We can maintain two pointers at distance n and move till end

link : https://leetcode.com/problems/remove-nth-node-from-end-of-list/

Code:

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        if(head == NULL || head->next == NULL)
            return NULL;
        
        int k = n;
        
        ListNode * first  = head , *second = head;
        
        while(first->next!=NULL)
        {
            if(k!=0)
            {
                k--;
                first = first->next;
            }
            
            else
            {
                first = first->next;
                second =second->next;
            }
        }
        
        ListNode * x = new ListNode;
        
        if(k!=0)
        {
            x = head;
            head= x->next;
            delete(x);
        }
        
        else
        {
            x = second->next;
            second->next = x->next;
            delete(x);
        }
        
        return head;
    }
};
