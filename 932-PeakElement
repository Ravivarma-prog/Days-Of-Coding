A peak element is an element that is strictly greater than its neighbors.

Given an integer array nums, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.

You may imagine that nums[-1] = nums[n] = -âˆž.

You must write an algorithm that runs in O(log n) time.

link : https://leetcode.com/problems/find-peak-element/

Code :

class Solution {
public:
    int findPeakElement(vector<int>& nums) {
        int left = 0 , right = nums.size()-1;
        int n = nums.size();
        
        if(n==1)
            return 0;
        
        if(nums[0] > nums[1])
            return 0;
        
        if(nums[n-1] > nums[n-2])
            return n-1;
        
        while(left <= right){
            int mid = left + (right - left)/2;
            
            if(mid-1 >= 0 && mid+1 < n && nums[mid] > nums[mid-1] && nums[mid] > nums[mid+1])
                return mid;
            
            if(mid+1 <= right && nums[mid+1] > nums[mid])
                left = mid+1;
            
            else if(mid-1 >= left && nums[mid-1] > nums[mid]) 
                right = mid-1;
        }
        return left;
    }
};

Approach 2 :

class Solution {
public:
    int findPeakElement(vector<int>& nums) {
        int left = 0 , right = nums.size()-1;
        int n = nums.size();
        
        while(left < right){
           int mid = (left+right+1)/2;
           
           if(nums[mid-1] > nums[mid])
               right = mid-1;
           else
               left = mid;
            
        }
        return left;
    }
};
