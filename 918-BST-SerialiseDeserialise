Serialization is converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, 
or transmitted across a network connection link to be reconstructed later in the same or another computer environment.

Design an algorithm to serialize and deserialize a binary search tree. There is no restriction on how your serialization/deserialization algorithm should work. 
You need to ensure that a binary search tree can be serialized to a string, and this string can be deserialized to the original tree structure.

The encoded string should be as compact as possible.

link : https://leetcode.com/problems/serialize-and-deserialize-bst/

Code :

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Codec {
    
    TreeNode * insertNode(TreeNode * root , int val)
    {
        if(root == NULL)
            return new TreeNode(val);
        
        if(val < root->val)
            root->left = insertNode(root->left , val);
        
        if(val > root->val)
            root->right = insertNode(root->right , val);
        
        return root;
    }
    
public:

    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {
        string s = "";
        
        if(root == NULL)
        {
            return "";
        }
        
        s += to_string(root->val);
        s+="-";
        
        string l = serialize(root->left);
        string r = serialize(root->right);
        
        s+=l;
        s+=r;
        
        return s;
    
        
    }

    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
        vector<int> pre = {};
        
        string s = "";
        for(char c : data)
        {
            if(c == '-')
                pre.push_back(stoi(s)) , s = "";
            else
                s+=c;
        }
        
        TreeNode * root = NULL;
        
        int n = pre.size();
        
        for(int i = 0 ; i < n ; i++)
            root = insertNode(root , pre[i]);
        
        return root;
        
    }
};

// Your Codec object will be instantiated and called as such:
// Codec* ser = new Codec();
// Codec* deser = new Codec();
// string tree = ser->serialize(root);
// TreeNode* ans = deser->deserialize(tree);
// return ans;

 
