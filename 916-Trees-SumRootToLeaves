You are given the root of a binary tree containing digits from 0 to 9 only.

Each root-to-leaf path in the tree represents a number.

For example, the root-to-leaf path 1 -> 2 -> 3 represents the number 123.
Return the total sum of all root-to-leaf numbers. Test cases are generated so that the answer will fit in a 32-bit integer.

A leaf node is a node with no children.

link  : https://leetcode.com/problems/sum-root-to-leaf-numbers/

Code :

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

using path = vector<int>;

class Solution {
    
    vector<path> findPaths(TreeNode * root)
    {
        if(root->left == NULL && root->right == NULL)
            return {{root->val}};
        
        vector<path> ans = {};
        
        vector<path> paths= {};
        
        if(root->left)
        {
            
            paths = findPaths(root->left);
        
            for(path p : paths)
                p.push_back(root->val) , ans.push_back(p);
        }
        
        if(root->right)
        {
             paths = findPaths(root->right);
        
            for(path p : paths)
                p.push_back(root->val) , ans.push_back(p);
        }
           
        
        return ans;
    }
    
public:
    int sumNumbers(TreeNode* root) {
        vector<path> s= findPaths(root);
        
        for(path i : s)
        {
            for(int j : i)
            {
                cout << j << " ";
            }
            
            cout << endl;
        }
      
        
        int n = s.size();
        int c;
        path a = s[0];
        
        for(int i = 1 ; i < n ; i++)
        {
             c = 0;
            path b = s[i];
            path temp = {};
            
            for(int j = 0 ; j < a.size() || j < b.size() ; j++)
            {
                int n1 = (j >= a.size() ? 0 : a[j]);
                int n2 = (j >= b.size() ? 0 : b[j]);
                
                int s = n1+n2+c;
                
               temp.push_back(s%10);
                c = s/10;
                
            }
                        
            a = temp;
            
            if(c)
            a.push_back(c);
        }
        
        
        
        int num = 0;
        reverse(a.begin() , a.end());
        for(int i : a)
        {
            num = (num*10)+i;
        }
        
        return num;
    }
};
