There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. 
You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.
For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.
Return true if you can finish all courses. Otherwise, return false.

Approach : Topological sort

link : https://leetcode.com/problems/course-schedule/

Code :

class Solution {
    
    vector<int> g[100001];
    int toComplete[100001];
    vector<int> completed;
    
public:
    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {
        memset(toComplete , 0 , sizeof(toComplete));
        
        for(vector<int> e : prerequisites)
        {
            int u = e[0] , v = e[1];
            g[v].push_back(u);
            toComplete[u]++;
        }
        
        queue<int> q;
    
        for(int i = 0 ; i < numCourses ; i++)
        {
            if(toComplete[i]==0)
                completed.push_back(i) , q.push(i);
        }
        
        if(completed.size() == 0)
            return false;
        
        while(!q.empty())
        {
            int curr = q.front();
            q.pop();
            
            for(int next : g[curr])
            {
                toComplete[next]--;
                if(toComplete[next] == 0)
                    completed.push_back(next) , q.push(next);
            }
            
        }
        
        return completed.size() == numCourses;
        
    }
};
