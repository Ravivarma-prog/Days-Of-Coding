Given the root of a binary search tree,
rearrange the tree in in-order so that the leftmost node in the tree is now the root of the tree,
and every node has no left child and only one right child.

link : https://leetcode.com/problems/increasing-order-search-tree/

Code :

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    
    vector<int> inorder(TreeNode * root)
    {
        vector<int> ans = {};
        
        if(root==NULL)
            return {};
        
        vector<int> l = inorder(root->left);
        
        for(int i : l )
            ans.push_back(i);
        
        ans.push_back(root->val);
        
        vector<int> r = inorder(root->right);
        
        for(int i : r)
            ans.push_back(i);
        
        return ans;
    }
    
    TreeNode * insert(TreeNode * root , int val)
    {
        if(root == NULL)
            return new TreeNode(val);
        
        if(val < root->val)
            root->left = insert(root->left ,val);
        
        if(val > root->val)
            root->right = insert(root->right , val);
        
        return root;
    }
    
public:
    TreeNode* increasingBST(TreeNode* root) {
        vector<int> in = inorder(root);  
        
        int n = in.size();
        
        TreeNode * t=NULL;
        
        for(int i = 0 ; i < n ; i++)
        {
            t = insert(t , in[i]);
        }
        
        return t;
    }
};
