You are given an integer n, the number of teams in a tournament that has strange rules:
1.If the current number of teams is even, each team gets paired with another team.
  A total of n / 2 matches are played, and n / 2 teams advance to the next round.
2.If the current number of teams is odd, one team randomly advances in the tournament, and the rest gets paired. 
  A total of (n - 1) / 2 matches are played, and (n - 1) / 2 + 1 teams advance to the next round.
Return the number of matches played in the tournament until a winner is decided.

link : https://leetcode.com/problems/count-of-matches-in-tournament/

Approach 1 :  Using loop

Time Complexity : O(N)
Space Complexity : O(1)

Code :

class Solution {
public:
    int numberOfMatches(int n) {
        int matches = 0;
        while(n!=1)
        {
            if(n%2==0)
                matches += (n/2) , n = n/2;
            else if(n%2 == 1)
                matches += (n-1)/2 , n = (n-1)/2 + 1;
            
        }
        return matches;
    }
};

Approach 2 :

if n = 5 then 2(for 5 teams) + 1(for 3 teams) + 1 (for 2 teams) = 4 matches
if n = 8 then 4(for 8 teams) + 2 (for 4 teams) + 1 (for 2 teams) = 7 matches
if n = 11 then 5(for 11 teams) + 3 (for 6 teams) + 1 (for 3 teams) + 1(for 2 teams) = 10 matches

Time Complexity : O(1)
Space Complexity : O(1)

Code:

class Solution {
public:
    int numberOfMatches(int n) {
        return n-1;
    }
};
