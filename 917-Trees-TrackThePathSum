Given the root of a binary tree and an integer targetSum, return all root-to-leaf paths where each path's sum equals targetSum.
A leaf is a node with no children.

link : https://leetcode.com/problems/path-sum-ii/

Code :

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    
    vector<vector<int>> findPaths(TreeNode * root , int s)
    {
        if(root->left == NULL && root->right == NULL)
        {
            if(s - root->val == 0)
                return {{root->val}};
        }
        
        vector<vector<int>> ans = {};
        vector<vector<int>> paths;
        
        if(root->left)
        {
            paths = findPaths(root->left , s-root->val);
            
            for(vector<int> p : paths)
                p.push_back(root->val) , ans.push_back(p);
        }
        
        if(root->right)
        {
            paths = findPaths(root->right , s-root->val);
            
            for(vector<int> p : paths)
                p.push_back(root->val) , ans.push_back(p);
        }
        
        return ans;
    }
    
public:
    vector<vector<int>> pathSum(TreeNode* root, int targetSum) {
        
        if(root == NULL)
            return {};
        
        vector<vector<int>> ans = findPaths(root , targetSum);
        
        for(vector<int> &i : ans)
            reverse(i.begin() , i.end());
        
        return ans;
    }
};
