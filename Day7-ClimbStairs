You are climbing a staircase. It takes n steps to reach the top
Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

Approach : Recursive DP. There are 2 cases to recurse.
            pos+1 and pos+2
            
link : https://leetcode.com/problems/climbing-stairs/

Code: 
class Solution {
public:
    
    int climb(int pos , int tar , int dp[]){
        if(pos > tar)
            return 0;
        if(pos==tar)
            return 1;
        
        if(dp[pos]!=-1)
            return dp[pos];
        
        return dp[pos] = climb(pos+1 , tar , dp)+climb(pos+2 ,tar , dp);
    }
    
    int climbStairs(int n) {
        int dp[n+1];
        memset(dp , -1, sizeof(dp));
        return climb( 0 , n ,dp);
    }
};
