Given a string s and a character c that occurs in s, return an array of integers answer where answer.length == s.length 
and answer[i] is the distance from index i to the closest occurrence of character c in s.
The distance between two indices i and j is abs(i - j), where abs is the absolute value function.

Approach :  Calculate the distance from right to left keeping track of the currently encountered c. Iterate from left to right to minimise the distance

link : https://leetcode.com/problems/shortest-distance-to-a-character/

Code :
class Solution {
public:
    vector<int> shortestToChar(string s, char c) {
        int n = s.length();
        vector<int> dist(n);
        int currPos;
        for(int i = n-1 ; i >= 0 ; i--)
        {
            if(s[i]==c)
                dist[i] = 0, currPos = i;
            else
                dist[i] = abs(currPos-i);
        }
        
        for(int i = 0 ; i < n ; i++)
        {
            if(s[i] == c)
                dist[i] = 0, currPos = i;
            else
                dist[i] = min(dist[i] , abs(currPos-i));
        }
        
        return dist;
    }
};
