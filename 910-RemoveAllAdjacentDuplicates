You are given a string s consisting of lowercase English letters.
A duplicate removal consists of choosing two adjacent and equal letters and removing them
We repeatedly make duplicate removals on s until we no longer can.
Return the final string after all such duplicate removals have been made. It can be proven that the answer is unique.

Approach : We can use substr method to extract the new string after finding duplicates. But this lead to TLE. So i used a stack , where if the ith character is same as
           top of the stack then pop it
           
link : https://leetcode.com/problems/remove-all-adjacent-duplicates-in-string/

Code : class Solution {
public:
    string removeDuplicates(string s) {
        stack<char> st;
        int n = s.length();
        
        if(n==1)
            return s;
        
        st.push(s[0]);
        
        for(int i = 1; i< n;i++)
        {
            if(!st.empty() && st.top() == s[i])
                st.pop();
            
            else
                st.push(s[i]);      
        }
        
        string removed = "";
        while(!st.empty())
        {
            removed+=st.top();
            st.pop();
        }
        
        reverse(removed.begin() , removed.end());
        
        return removed;
    }
};
