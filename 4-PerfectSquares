Given an integer n, return the least number of perfect square numbers that sum to n.
A perfect square is an integer that is the square of an integer; in other words, it is the product of some integer with itself.
For example, 1, 4, 9, and 16 are perfect squares while 3 and 11 are not.

Approach : Since the sum can be formed with any subset of numbers,I thought of dynammic programming approach.

Time Complexity : O(N^2)
Space Complexity :O(N^2)

link : https://leetcode.com/problems/perfect-squares/

Code : class Solution {
public:  
    int numSquares(int n) {
        vector<int> squares;
        
        for(int i = 1 ; i*i <= n ; i++)
            squares.push_back(i*i);
        
        int m = squares.size();
        
        int dp[m+1][n+1];
        
        for(int i = 0 ; i <= m ;i++)
            dp[i][0] = 0;
        
        for(int i = 1 ; i <= n; i++)
            dp[0][i] = INT_MAX-1;
        
        for(int i=1;i<=m ; i++)
        {
            for(int j = 1 ; j <=n ;j++)
            {
                if(squares[i-1] <= j)
                    dp[i][j] = min(1+dp[i][j-squares[i-1]] , dp[i-1][j]);
                
                else
                    dp[i][j] = dp[i-1][j];
            }
        }
        
        return dp[m][n];
    }
};
