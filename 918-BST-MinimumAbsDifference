Given the root of a Binary Search Tree (BST), return the minimum absolute difference between the values of any two different nodes in the tree.

link : https://leetcode.com/problems/minimum-absolute-difference-in-bst/

Code :

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    
    vector<int> inorder(TreeNode * root)
    {
        vector<int> ans ={};
        if(root == NULL)
            return  {};
        
        vector<int> l = inorder(root->left);
        
        for(int i : l)
            ans.push_back(i);
        
        ans.push_back(root->val);
        
        vector<int> r = inorder(root->right);
        
        for(int i : r)
            ans.push_back(i);
        
        return ans;
        
    }
    
public:
    int getMinimumDifference(TreeNode* root) {
        vector<int> nums = inorder(root);
        int mn = INT_MAX;
        
        for(int i = 0 ; i < nums.size()-1 ; i++)
            mn = min(mn, nums[i+1]-nums[i]);
        
        return mn;
    }
};
