Given the root of a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the 
original key plus sum of all keys greater than the original key in BST.

link : https://leetcode.com/problems/convert-bst-to-greater-tree/

Code : 

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    
    void Add(TreeNode * root , int & rs)
    {
        if(root == NULL)
            return;
        
        Add(root->right ,rs);
        
        root->val = root->val + rs;
        rs = root->val;
        
        Add(root->left , rs);
            
    }
    
public:
    TreeNode* convertBST(TreeNode* root) {
        int s = 0 ;
        Add(root , s);
        return root;
    }
};
