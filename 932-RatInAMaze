Consider a rat placed at (0, 0) in a square matrix of order N * N.
It has to reach the destination at (N - 1, N - 1). Find all possible paths that the rat can take to reach from source to destination. 
The directions in which the rat can move are 'U'(up), 'D'(down), 'L' (left), 'R' (right). 
Value 0 at a cell in the matrix represents that it is blocked and rat cannot move to it while value 1 at a cell in the matrix represents that rat can be travel through it.
Note: In a path, no cell can be visited more than one time.

link : https://practice.geeksforgeeks.org/problems/rat-in-a-maze-problem/1

Code :

// { Driver Code Starts
// Initial template for C++

#include <bits/stdc++.h>
using namespace std;


 // } Driver Code Ends
// User function template for C++

class Solution{
    public:
    
    vector<string> ans = {};
    string s = "";
    bool flag = false;
    
    // int dx[4] = {-1,1,0,0};
    // int dy[4] = {0,0,-1,1};
    
    void tracePath(vector<vector<int>> & m ,  int i , int j , int n)
    {
        
        if(i == n-1 && j == n-1)
        {
            flag = true;
            ans.push_back(s);
            return;
        }
        
        m[i][j] = 0;
        
        //Move down
        if(i+1 >= 0 && i+1 < n && j>=0 && j< n && m[i+1][j] == 1)
        {
            
            s.push_back('D');
            tracePath(m , i+1 , j , n);
            s.pop_back();
                
        }
        
        //Move up
        if(i-1 >= 0 && i-1 < n && j >= 0 && j < n && m[i-1][j] == 1)
        {
            s.push_back('U');
            tracePath(m , i-1 , j , n);
            s.pop_back();
        }
        
        //Move right
        if(i >= 0 && i < n && j+1 >= 0 && j+1 < n && m[i][j+1] == 1)
        {
            s.push_back('R');
            tracePath(m , i , j+1 , n);
            s.pop_back();            
        }

        
        //Move left
        if(i >= 0 && i < n && j-1 >= 0 && j-1 < n && m[i][j-1] == 1)
        {
            s.push_back('L');
            tracePath(m , i , j-1 , n);
            s.pop_back();    
        }
        
        m[i][j] = 1;
    }
    
    static bool comp(string a , string b)
    {
        if(a.length() == b.length())
            return a < b;
        
        return a.length() < b.length();
    }
    
    vector<string> findPath(vector<vector<int>> &m, int n) {
        // Your code goes here
        
        if(m[0][0] == 0)
            return {"-1"};
        
        tracePath(m , 0 , 0 , n);
        
        if(flag == false)
            return {"-1"}; 
        
        sort(ans.begin() , ans.end() );
        
        return ans;
    }
};

    


// { Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        vector<vector<int>> m(n, vector<int> (n,0));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                cin >> m[i][j];
            }
        }
        Solution obj;
        vector<string> result = obj.findPath(m, n);
        if (result.size() == 0)
            cout << -1;
        else
            for (int i = 0; i < result.size(); i++) cout << result[i] << " ";
        cout << endl;
    }
    return 0;
}  // } Driver Code Ends

