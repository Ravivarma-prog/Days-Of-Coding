You have n boxes. You are given a binary string boxes of length n, where boxes[i] is '0' if the ith box is empty, and '1' if it contains one ball.

In one operation, you can move one ball from a box to an adjacent box. Box i is adjacent to box j if abs(i - j) == 1.
Note that after doing so, there may be more than one ball in some boxes.

Return an array answer of size n, where answer[i] is the minimum number of operations needed to move all the balls to the ith box.

Each answer[i] is calculated considering the initial state of the boxes.

link : https://leetcode.com/problems/minimum-number-of-operations-to-move-all-balls-to-each-box/

Code :

class Solution {
public:
    vector<int> minOperations(string boxes) {
        vector<int> ans = {};
        
        int n = boxes.length();
        
        if(n==1)
            return {0};
        
        vector<int> left(n , 0) , right (n , 0); //To maintain the operations of filling left and right ones
        
        for(int i = 1 ; i < n ; i++)
        {
            for(int j = 0 ; j < i ; j++)
            {
                if(boxes[j]=='1')
                    left[i] += (i-j);
            }
        }
        
        for(int i = n-2 ; i >= 0 ; i--)
        {
            for(int j = n-1 ; j > i ; j--)
            {
                if(boxes[j] == '1')
                    right[i]+= (j-i);
            }
        }
        
//         for(int i : left)
//             cout << i << " ";
        
//         for(int  i : right)
//             cout << i << " ";
        
        for(int i = 0 ; i < n ; i++)
            ans.push_back(left[i]+right[i]);
        
        return ans;
    }
};
