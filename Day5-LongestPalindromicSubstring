Given a string s, return the longest palindromic substring in s.

Approach : I have a pointer mid and i will be expanding it in both sides and compare the characters.

Time Complexity : O(N^2)
Space Complexity : O(1)

link : https://leetcode.com/problems/longest-palindromic-substring/

Code :

class Solution {
public:
    string longestPalindrome(string s) {
     
        int ml = 0;
        int start =0;
        int n = s.length();
        for(int mid = 0 ; mid < n ; mid ++)
        {
            //We are starting from mid and expanding toward both sides and checking if the characters match
            for(int x = 0 ; mid-x >=0 && mid+x < n ; ++x)
            {
                if(s[mid-x]!=s[mid+x])
                    break;
            
                int len = 2*x+1;
                if(len > ml)
                    ml = len , start = mid-x;
            }
        }
        
        //For string like abba -> compare (mid , mid+1) , (mid-1 , mid+2) , (mid-2 , mid+3),...
        
        for(int mid = 0 ;  mid < n ; mid++)
        {
            for(int x = 1 ; mid-x+1 >= 0 && mid+x < n ; ++x)
            {
                if(s[mid-x+1]!=s[mid+x])
                    break;
                
                int len = 2*x;
                if(len > ml)
                    ml = len , start = mid-x+1;
            }
        }
        
        return s.substr(start , ml);
    }
};
