In this problem, a tree is an undirected graph that is connected and has no cycles.
You are given a graph that started as a tree with n nodes labeled from 1 to n, with one additional edge added.
The added edge has two different vertices chosen from 1 to n, and was not an edge that already existed.
The graph is represented as an array edges of length n where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the graph.
Return an edge that can be removed so that the resulting graph is a tree of n nodes. If there are multiple answers, return the answer that occurs last in the input.

Approach : Disjoint Sets. If 2 nodes have the same parents then a cycle is found

link : https://leetcode.com/problems/redundant-connection/

Code :

class Solution {
public:
    
    int par[1001];
    
    int find(int a)
    {
        if(par[a] < 0)
            return a;
        return par[a] = find(par[a]);
    }
    
    //Can perform union by rank for further optimisation
    void merge(int a , int b)
    {
        par[b] = a;
    }
    
    vector<int> findRedundantConnection(vector<vector<int>>& edges) {
        memset(par , -1 ,sizeof(par));
        vector<int> out = {};
        int redU , redV; //redundant u and redundant v
        for(vector<int> e : edges)
        {
            int u = e[0] , v = e[1];
            
            int up = find(u) , vp = find(v);
            
            if(up == vp)
                redU = u , redV = v;
            
            else
                merge(up , vp);
        }
        out.push_back(redU) , out.push_back(redV);
        return out;
    }
};
