We are given a matrix with rows rows and cols columns has cells with integer coordinates (r, c), where 0 <= r < rows and 0 <= c < cols.
Additionally, we are given a cell in that matrix with coordinates (rCenter, cCenter).

Return the coordinates of all cells in the matrix, sorted by their distance from (rCenter, cCenter) from smallest distance to largest distance. 
Here, the distance between two cells (r1, c1) and (r2, c2) is the Manhattan distance, |r1 - r2| + |c1 - c2|.
(You may return the answer in any order that satisfies this condition.)

Approach : BFS will give the cells that are in shortest distance to the current cell

link : https://leetcode.com/problems/matrix-cells-in-distance-order/

Code : 

using pos = pair<int , int>;
int dx[4] = {-1 , 1 , 0 , 0};
int dy[4] = {0 , 0 , -1 , 1};

class Solution {
public:
    vector<vector<int>> allCellsDistOrder(int rows, int cols, int rCenter, int cCenter) {
        vector<vector<int>> vis(rows , vector<int> (cols , 0));
        vector<vector<int>> out;
        
        queue<pos> q;
        q.push({rCenter , cCenter});
        vis[rCenter][cCenter] = 1;
        
        while(!q.empty())
        {
            pos curr = q.front();
            q.pop();
            
            int x = curr.first , y = curr.second;
            
            out.push_back({x,y});
            
            for(int i = 0 ;  i < 4 ; i++)
            {
                int newX = x+dx[i] , newY = y+dy[i];
                
                if(newX >= 0 && newX < rows && newY >= 0 && newY < cols && vis[newX][newY] == 0)
                {
                    q.push({newX , newY});
                    vis[newX][newY] = 1;
                }
            }
            
        }
        
        return out;
        
    }
};
