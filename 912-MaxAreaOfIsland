You are given an m x n binary matrix grid.
An island is a group of 1's (representing land) connected 4-directionally (horizontal or vertical.) 
You may assume all four edges of the grid are surrounded by water.

The area of an island is the number of cells with a value 1 in the island.
Return the maximum area of an island in grid. If there is no island, return 0

Approach : DFS for each connected component

link : https://leetcode.com/problems/max-area-of-island/

Code :

class Solution {
    int area = 0;
    int dx[4] = {-1 , 1 , 0 ,0 };
    int dy[4] = {0 , 0 , -1 , 1};
    
    void dfs(vector<vector<int>> &a , int x , int y , int r , int c)
    {
        a[x][y] = 0;
        area++;
        
        for(int k = 0 ;k < 4 ;k++)
        {
            int newX = x+dx[k];
            int newY = y+dy[k];
            
            if(newX >= 0 && newX < r && newY >=0 && newY < c && a[newX][newY])
                dfs(a , newX , newY , r, c);
        }
    }
    
public:
    
    int maxAreaOfIsland(vector<vector<int>>& grid) {
        int maxArea = 0;
        
        int r = grid.size() , c = grid[0].size();
        
        for(int i = 0 ; i < r ; i++)
        {
            for(int j = 0 ; j < c ; j++)
            {
                if(grid[i][j])
                {
                    area = 0;
                    dfs(grid , i , j , r, c);
                    maxArea = max(maxArea , area);
                }
            }
        }
        
        return maxArea;
    }
};
