Alice loves candies, so she went into a candy shop. Now the shopkeeper sells candies in packets and all packets contain an odd number of candies (1, 3, 5, 7.....).
Alice wants exactly  candies but she also loves patterns so she decided to buy candies only if the number of candies in the packets is consecutive and distinct 
(means she cannot buy the same candy packet more than once) and the sum of all the candies in those packets is exactly .

Alice has an infinite amount of money and the shopkeeper also has infinite amount candy packets, so Alice wonders how many different sets of candy packets she can buy.

Find the number of different sets of candy packets that Alice can buy.

link : https://www.hackerearth.com/practice/math/number-theory/basic-number-theory-1/practice-problems/algorithm/lola-and-candies-36b57b1b/

Code :

//Finding the factors will take O(sqrt(N)) and thats the space and time complexity

#include<bits/stdc++.h>
using namespace std;

int main(){

	ios :: sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);

	int target;
	cin >> target;
  
	/*
	Since the odd numbers are consecutive
	x + (x+2) + (x+4) + (x+6) +....+(x+2(n-1)) = target
	
	nx + 2(1+2+3...+n-1) = target

	nx + (n-1)^2 + (n-1) = target  (1+2+3+..+n = n(n+1)/2)

	simplify and divide by n => x + n -1 = target/n

	target must be divisible by n
	find all n and calc x.
	x is starting element and it must a positive odd number
	
	*/

	vector<int> factors;

	for(int i = 1; i*i <= target ;i++)
	{
		if(target%i == 0)
		{
			factors.push_back(i);

			if(i*i != target)
				factors.push_back(target/i);
		}
	}

	//Finding x
	int count = 0;
	for(int n : factors)
	{

		// cout << n;
		int x = (target/n)+1-n;

		if(x>0 && x%2 == 1)
			count++;
	}

	cout << count;

}
