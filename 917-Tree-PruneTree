Given the root of a binary tree, return the same tree where every subtree (of the given tree) not containing a 1 has been removed.
A subtree of a node node is node plus every node that is a descendant of node.

Approach : If i reach a leaf node, if the value is zero then return null or else return the root
           If the node has left , recurse through left and if it has right recurse throught right and assign them to root->left ans root->right;
           Again check if the right and left are null and value is zero if so again return null

link : https://leetcode.com/problems/binary-tree-pruning/

Code :

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* pruneTree(TreeNode* root) {
        if(root->left == NULL && root->right == NULL)
        {
            if(root->val == 0)
                return NULL;
            else
                return root;
        }
        
        if(root->left)
        {
            root->left = pruneTree(root->left);
        }
        
        if(root->right)
        {
            root->right = pruneTree(root->right);
        }
        
        if(root->right == NULL && root->left == NULL && root->val == 0)
            return NULL;
        
        return root;
    }
};
