Given a directed acyclic graph, with n vertices numbered from 0 to n-1, and an array edges where edges[i] = [fromi, toi]
represents a directed edge from node fromi to node toi.
Find the smallest set of vertices from which all nodes in the graph are reachable. It's guaranteed that a unique solution exists.
Notice that you can return the vertices in any order.

Approach : In a DAG, there will be atleast one node which has indegree to be zero

Time Complexity : O(N)
Space Complexity : O(N)

link : https://leetcode.com/problems/minimum-number-of-vertices-to-reach-all-nodes/

Code :

class Solution {
public:
    vector<int> findSmallestSetOfVertices(int n, vector<vector<int>>& edges) {
        int indegree[n];
        memset(indegree , 0  , sizeof(indegree));
        vector<int> out = {};
        
        for(vector<int> e : edges)
        {
            int u = e[0] , v=e[1];
            indegree[v]++;
        }
        
        for(int i = 0 ; i< n ; i++)
        {
            if(indegree[i] == 0)
                out.push_back(i);
        }
        
        return out;
    }
};
