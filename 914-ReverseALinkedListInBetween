Given the head of a singly linked list and two integers left and right where left <= right, 
reverse the nodes of the list from position left to position right, and return the reversed list.

link : https://leetcode.com/problems/reverse-linked-list-ii/

Code : 

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseBetween(ListNode* head, int left, int right) {
        if(head == NULL || head->next == NULL)
            return head;
                
        ListNode * first = head , * second = head , *start = head , *end = head , *curr =head , *prev = head , *nextNode = head;
        
        for(int i = 1 ; i < left ; i++)
            start = first , first = first->next;
        
        for(int i = 1 ; i < right ; i++)
            second = second->next;
        
        end = second->next;
        
        curr = first->next;
        prev = first;
        
        while(curr != end)
        {
            nextNode = curr->next;
            curr->next = prev;
            prev = curr;
            curr= nextNode;
        }
        
        if(left == 1)
        {
            head = second;
            first->next = end;
        }
        
        else{
            first->next = end;
            start->next = second;
        }
        
        
        return head;
    }
};
